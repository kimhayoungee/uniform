package com.uniform.ea.approval.controller;

import java.io.IOException;
import java.util.HashMap;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.TransactionDefinition;
import org.springframework.transaction.TransactionStatus;
import org.springframework.transaction.support.DefaultTransactionDefinition;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;
import org.springframework.web.servlet.view.RedirectView;

import com.uniform.common.info.vo.CommonCodeVO;
import com.uniform.common.info.vo.CommonInfoVO;
import com.uniform.common.utils.FileUtil;
import com.uniform.common.utils.SessionUtil;
import com.uniform.ea.approval.service.EaApprovalService;
import com.uniform.ea.approval.vo.EaApprovalVO;
import com.uniform.ea.approval.vo.EaDocumentVO;
import com.uniform.ea.approval.vo.EaGianVO;
import com.uniform.ea.approval.vo.EaLineVO;
import com.uniform.ea.approval.vo.EaVacationVO;
import com.uniform.ea.approval.vo.PageVO;
import com.uniform.ea.common.Chaebun;
import com.uniform.ea.common.GetDate;
import com.uniform.em.common.vo.EmCommonVO;

@Controller
@RequestMapping("/ea")
public class EaApprovalController {
	Logger logger = Logger.getLogger(EaApprovalController.class);
	
	private static final String CONTEXT_PATH = "ea";
	
	@Autowired
	private EaApprovalService eaApprovalService; 
	
	final static String FILEPATH =  "D:/00.BITCAMP/java142_Luna/.metadata/"
		  	+ ".plugins/org.eclipse.wst.server.core/tmp1/webapps/uploads";
	final static String DOWNLOADPATH = "files/";
	
	//전자결재메인으로 이동
	@RequestMapping("/goEaMain")
	public ModelAndView goEaMain(HttpServletRequest req){
		logger.info("컨트롤러 goEaMain()함수 시작");
		//b가 있으면 reload()하기 위해 받아옴
		
		String i_no = (String)req.getSession().getAttribute("i_no");
		EaDocumentVO edvo = new EaDocumentVO();
		edvo.setDo_writerno(i_no);
		edvo.setDo_aprno(i_no);

		PageVO pvo = new PageVO();
		//내가작성
		pvo.setDo_writerno(i_no);
		//내가결재
		pvo.setDo_aprno(i_no);
		pvo.setPageSize(10);
		pvo.setCurPage(1);
		
		List<PageVO> inglist = eaApprovalService.eaIngSelect(pvo);
		List<PageVO> toList = eaApprovalService.toApSelect(pvo);
		List<PageVO> reList = eaApprovalService.returnSelect(pvo);
		List<PageVO> finList = eaApprovalService.finSelect(pvo);
		
		ModelAndView mav = new ModelAndView();
		mav.addObject("ingList", inglist);
		mav.addObject("toList", toList);
		mav.addObject("reList", reList);
		mav.addObject("finList", finList);
		//리다이렉트용
		mav.setViewName(CONTEXT_PATH + "/eaMain");
		return mav;
	}
	
	//menu 결재할 문서 이동
	@RequestMapping("/goMenuTo")
	public ModelAndView goMenuTo(@ModelAttribute PageVO param,HttpServletRequest req){
		logger.info("컨트롤러 goMenuTo()함수 시작");
		
		String i_no = (String)req.getSession().getAttribute("i_no");
		
		PageVO pvo = new PageVO();
		pvo.setDo_aprno(i_no);
		pvo.setPageSize(10);
		
		int curPage = param.getCurPage();
		if(curPage==0){

			pvo.setCurPage(1);
 
		}else{

			pvo.setCurPage(curPage);

		}

		//날짜 검색
		if(param.getDate1()==null && param.getDate2()==null){
			pvo.setDate1(GetDate.getFromDate());
			pvo.setDate2(GetDate.getToday());
		}else{
			pvo.setDate1(param.getDate1());
			pvo.setDate2(param.getDate2());			
		}			
		
		//작성자 이름으로 검색
		pvo.setDo_writer(param.getDo_writer());
		
		//종류별 정렬 do_type
		pvo.setDo_type(param.getDo_type());
		
		//상태별 정렬 ea_stateno
		pvo.setEa_stateno(param.getEa_stateno());
		
		List<PageVO> toList = eaApprovalService.toApSelect(pvo);
		
		ModelAndView mav = new ModelAndView();
		if(param.getDo_type()!=null&&param.getDo_type().length()>0){
			mav.addObject("type", param.getDo_type());
		} 
		if(param.getEa_stateno()!=null&&param.getEa_stateno().length()>0){
			mav.addObject("state", param.getEa_stateno());
		} 
		if(param.getDate1()==null && param.getDate2()==null){
			mav.addObject("date1", GetDate.getFromDate());
			mav.addObject("date2", GetDate.getToday());
		}else{
			mav.addObject("date1", param.getDate1());
			mav.addObject("date2", param.getDate2());
		}	
		if(param.getDo_writer()!=null&&param.getDo_writer().length()>0){
			mav.addObject("writer", param.getDo_writer());
		}
		mav.addObject("toList", toList);
		mav.setViewName(CONTEXT_PATH + "/menuTo");
		return mav;
	}	
	
	//menu 반려함 이동
	@RequestMapping("/goMenuRe")
	public ModelAndView goMenuRe(@ModelAttribute PageVO param
								 ,HttpServletRequest req){
		logger.info("컨트롤러 goMenuRe()함수 시작");
		
		String i_no = (String)req.getSession().getAttribute("i_no");

		PageVO pvo = new PageVO();
		pvo.setDo_writerno(i_no);
		pvo.setPageSize(10);
		
		int curPage = param.getCurPage();
		if(curPage==0){

			pvo.setCurPage(1);
 
		}else{

			pvo.setCurPage(curPage);

		}

		//날짜 검색
		if(param.getDate1()==null && param.getDate2()==null){
			pvo.setDate1(GetDate.getFromDate());
			pvo.setDate2(GetDate.getToday());
		}else{
			pvo.setDate1(param.getDate1());
			pvo.setDate2(param.getDate2());			
		}		
		
		//종류별 정렬 do_type
		pvo.setDo_type(param.getDo_type());
		
		List<PageVO> reList = eaApprovalService.returnSelect(pvo);
		
		ModelAndView mav = new ModelAndView();
		if(param.getDo_type()!=null&&param.getDo_type().length()>0){
			mav.addObject("type", param.getDo_type());   
		} 	
		if(param.getDate1()==null && param.getDate2()==null){
			mav.addObject("date1", GetDate.getFromDate());
			mav.addObject("date2", GetDate.getToday());
		}else{
			mav.addObject("date1", param.getDate1());
			mav.addObject("date2", param.getDate2());
		}		
		mav.addObject("reList", reList);
		mav.setViewName(CONTEXT_PATH + "/menuRe");
		return mav;
	}	
	
	//menu 결재중 문서 이동
	@RequestMapping("/goMenuIng")
	public ModelAndView goMenuIng(@ModelAttribute PageVO param
								  ,HttpServletRequest req){
		logger.info("컨트롤러 goMenuIng()함수 시작");

		String i_no = (String)req.getSession().getAttribute("i_no");
		
		PageVO pvo = new PageVO();
		pvo.setDo_writerno(i_no);
		pvo.setPageSize(10);	
		
		int curPage = param.getCurPage();
		
		if(curPage==0){

			pvo.setCurPage(1);
 
		}else{

			pvo.setCurPage(curPage);

		}
		
		//날짜 검색
		if(param.getDate1()==null && param.getDate2()==null){
			pvo.setDate1(GetDate.getFromDate());
			pvo.setDate2(GetDate.getToday());
		}else{
			pvo.setDate1(param.getDate1());
			pvo.setDate2(param.getDate2());			
		}
		
		//종류별 정렬 do_type
		pvo.setDo_type(param.getDo_type());
		
		//상태별 정렬 ea_stateno
		pvo.setEa_stateno(param.getEa_stateno());

		List<PageVO> inglist = eaApprovalService.eaIngSelect(pvo);
		
		ModelAndView mav = new ModelAndView();

		if(param.getDo_type()!=null&&param.getDo_type().length()>0){
			mav.addObject("type", param.getDo_type());
		} 
		if(param.getEa_stateno()!=null&&param.getEa_stateno().length()>0){
			mav.addObject("state", param.getEa_stateno());
		} 
		if(param.getDate1()==null && param.getDate2()==null){
			mav.addObject("date1", GetDate.getFromDate());
			mav.addObject("date2", GetDate.getToday());
		}else{
			mav.addObject("date1", param.getDate1());
			mav.addObject("date2", param.getDate2());
		}
		mav.addObject("inglist", inglist);
		mav.setViewName(CONTEXT_PATH + "/menuIng");
		return mav;
	}	
	
	//menu 완료함 이동
	@RequestMapping("/goMenuFin")
	public ModelAndView goMenuFin(@ModelAttribute PageVO param
								  ,HttpServletRequest req){
		logger.info("컨트롤러 goMenuFin()함수 시작");
		
		String i_no = (String)req.getSession().getAttribute("i_no");

		PageVO pvo = new PageVO();
		pvo.setDo_writerno(i_no);
		pvo.setPageSize(10);
		
		int curPage = param.getCurPage();
		
		if(curPage==0){

			pvo.setCurPage(1);
 
		}else{

			pvo.setCurPage(curPage);

		}
		
		//날짜 검색
		if(param.getDate1()==null && param.getDate2()==null){
			pvo.setDate1(GetDate.getFromDate());
			pvo.setDate2(GetDate.getToday());
		}else{
			pvo.setDate1(param.getDate1());
			pvo.setDate2(param.getDate2());			
		}
		
		//종류별 정렬 do_type
		pvo.setDo_type(param.getDo_type());

		List<PageVO> finList = eaApprovalService.finSelect(pvo);
		
		ModelAndView mav = new ModelAndView();
		if(param.getDo_type()!=null&&param.getDo_type().length()>0){
			mav.addObject("type", param.getDo_type());
		} 	
		if(param.getDate1()==null && param.getDate2()==null){
			mav.addObject("date1", GetDate.getFromDate());
			mav.addObject("date2", GetDate.getToday());
		}else{
			mav.addObject("date1", param.getDate1());
			mav.addObject("date2", param.getDate2());
		}		
		mav.addObject("finList", finList);
		mav.setViewName(CONTEXT_PATH + "/menuFin");
		return mav;
	}
	
	//menu 결재한 문서 
	@RequestMapping("/goMenuEd")
	public ModelAndView goMenuEd(@ModelAttribute PageVO param
								 ,HttpServletRequest req){
		logger.info("컨트롤러 goMenuEd()함수 시작");
		System.out.println("두라잇 " + param.getDo_writer());
		String i_no = (String)req.getSession().getAttribute("i_no");
		
		PageVO pvo = new PageVO();
		pvo.setEa_aprno(i_no);
		pvo.setPageSize(10);
		
		int curPage = param.getCurPage();
		
		if(curPage==0){

			pvo.setCurPage(1);
 
		}else{

			pvo.setCurPage(curPage);

		}

		//날짜 검색
		if(param.getDate1()==null && param.getDate2()==null){
			pvo.setDate1(GetDate.getFromDate());
			pvo.setDate2(GetDate.getToday());
		}else{
			pvo.setDate1(param.getDate1());
			pvo.setDate2(param.getDate2());			
		}		

		//작성자 이름으로 검색
		pvo.setDo_writer(param.getDo_writer());
		
		//종류별 정렬 do_type
		pvo.setDo_type(param.getDo_type());		
		
		//상태별 정렬 ea_stateno
		pvo.setEa_stateno(param.getEa_stateno());
		
		List<PageVO> edList = eaApprovalService.edSelect(pvo);
		
		ModelAndView mav = new ModelAndView();
		if(param.getDo_type()!=null&&param.getDo_type().length()>0){
			mav.addObject("type", param.getDo_type());
		} 
		if(param.getEa_stateno()!=null&&param.getEa_stateno().length()>0){
			mav.addObject("state", param.getEa_stateno());
		} 
		if(param.getDate1()==null && param.getDate2()==null){
			mav.addObject("date1", GetDate.getFromDate());
			mav.addObject("date2", GetDate.getToday());
		}else{
			mav.addObject("date1", param.getDate1());
			mav.addObject("date2", param.getDate2());
		}	
		if(param.getDo_writer()!=null&&param.getDo_writer().length()>0){
			mav.addObject("writer", param.getDo_writer());
		}	
		mav.addObject("edList", edList);
		mav.setViewName(CONTEXT_PATH + "/menuEd");
		return mav;
	}	
	
	//전결 메인에서 기안서 팝업창으로 이동
	@RequestMapping("/goGianPop")
	public ModelAndView goGianPop(){
		logger.info("컨트롤러 goGianPop()함수 시작");
		ModelAndView mav = new ModelAndView();
		mav.setViewName(CONTEXT_PATH + "/gianPop");
		return mav;
	} //end of goGianPop()
	
	//기안 팝업창에서 기안서 작성창으로 이동 
	@RequestMapping("/goGianWrite")
	public ModelAndView goGianWrite(@RequestParam("ea_linename") String ea_linename 
								   ,HttpServletRequest req){
		logger.info("컨트롤러 goGianWrite(ea_linename)함수 시작");
		logger.info("확인 : " + ea_linename );
		
		ModelAndView mav = new ModelAndView();
		if(ea_linename!=null&&ea_linename.length()>0){
			
			//오늘날짜 조회
			String today = eaApprovalService.today();
			mav.addObject("today", today);
			
			//작성자 팀, 이름 조회
			String i_no = (String)req.getSession().getAttribute("i_no");
			CommonInfoVO civo = new CommonInfoVO();
			civo.setI_no(i_no);
			List<EmCommonVO> list = eaApprovalService.writerSelect(civo);
			mav.addObject("emvo", list);
			
			//양식
			mav.addObject("do_type", "기안");			
			mav.addObject("ea_linename", ea_linename);
			mav.setViewName(CONTEXT_PATH + "/gianWrite");
		}
		
		return mav;
	} //end of goGianWrite(ea_linename)

	//결재선 팝업
	@RequestMapping("/goLinePop")
	public ModelAndView goLinePop(){
		ModelAndView mav = new ModelAndView();
		mav.setViewName(CONTEXT_PATH + "/linePop");
		return mav;
	}
	
	//결재선 총장 처 조회
	@ResponseBody
	@RequestMapping("/deptSelect")
	public HashMap<String, List> deptSelect(){
		logger.info("컨트롤러 deptSelect()함수 시작");
		
		//총장 조회
		List<CommonInfoVO> iList = eaApprovalService.presidentSelect();
		
		//처 조회
		List<CommonCodeVO> deptList = eaApprovalService.deptSelect();
		for(int i=0;i<deptList.size();i++){
			CommonCodeVO ccvo = deptList.get(i);
			System.out.println("포문확인(처) : " + ccvo.getCode_detail());
		}
		
		HashMap<String, List> hmap = new HashMap<String, List>();
		hmap.put("president", iList);
		hmap.put("dept", deptList);
		return hmap;
	}
	
	//결재선 팀 조회
	@ResponseBody
	@RequestMapping("/teamSelect")
	public HashMap<String, List> teamSelect(String dept){
		logger.info("컨트롤러 teamSelect(dept)함수 시작");
		logger.info("dept 확인 : " + dept);
		
		CommonCodeVO ccvo = new CommonCodeVO();
		ccvo.setCode_detail(dept);
		
		//처장 조회
		List<CommonInfoVO> iList = eaApprovalService.deptLeaderSelect(ccvo);
		
		//팀 조회
		List<CommonCodeVO> teamList = eaApprovalService.teamSelect(ccvo);
		for(int i=0;i<teamList.size();i++){
			CommonCodeVO cvo = teamList.get(i);
			System.out.println("포문확인(팀) : " + cvo.getCode_detail());
		}
		
		HashMap<String, List> hmap = new HashMap<String, List>();
		hmap.put("deptLeader", iList);
		hmap.put("team", teamList);
		
		return hmap;
	}
	
	//결재선 팀장 조회
	@ResponseBody
	@RequestMapping("/teamLeaderSelect")
	public List<CommonInfoVO> teamLeaderSelect(String team){
		logger.info("컨트롤러 teamLeaderSelect(team)함수 시작");
		logger.info("team 확인 : " + team);
		
		CommonCodeVO ccvo = new CommonCodeVO();
		ccvo.setCode_detail(team);
		
		//팀장 조회
		List<CommonInfoVO> iList = eaApprovalService.teamLeaderSelect(ccvo);
		//String i_namekr = iList.get(0).getI_nameKr();
		//String i_no = iList.get(0).getI_no();
		//System.out.println("팀장 확인 : " + i_namekr + " " + i_no);
		
		return iList;
	}
	
	//기안서 작성 파일 업로드
	@ResponseBody
	@RequestMapping(value="/fileUpload", produces="html/text; charset=utf-8")
	public String fileUpload(HttpServletRequest req){
		logger.info("컨트롤러 fileUpload(req)");
		String result = "";
		String file = "";
		//파일업로드
		try{
			
			String upload = "/ea/files/";
			
			file = FileUtil.fileUpload(req, upload);
		
			//egvo.setGi_attach(file);
			if(file!=null&& file.length()>0){
				result = "성공";
				logger.info("ㅇ" + result);
				System.out.println("파일 : " + file);
			}
			
		}catch(Exception e){
			logger.info("파일업로드 에러 : " + e.getMessage());
		} //try-catch
		
		
		return file;
	}
	
	//기안서 작성 
	@ResponseBody
	@RequestMapping(value="/gianFormInsert", produces="application/text; charset=utf-8")
	public String gianFormInsert(@ModelAttribute EaGianVO param
								 ,HttpServletRequest req){
		logger.info("컨트롤러 gianFormInsert(param)");
		logger.info("req 확인 : " + req.getParameter("gi_title") + " " + req.getParameter("ea_line1"));
		logger.info("param확인 : " + param.getDo_title() + " " + param.getEa_line1());
		int doc_result = 0;
		int gi_result = 0;
		int ea_result = 0;
		int line_result = 0;
		
		EaApprovalVO eavo = new EaApprovalVO();
		String i_no = (String)req.getSession().getAttribute("i_no");
		
		//기안서 채번
		List<EaGianVO> gianChList = eaApprovalService.gianChaebun();
		String gianCh = Chaebun.gianChaebun(gianChList);
		logger.info("기안서채번확인 : " + gianCh);
		//결재선 채번
		List<EaLineVO> lineChList = eaApprovalService.lineChaebun();
		String lineCh = Chaebun.eaLineChaebun(lineChList);
		logger.info("결재선채번확인 : " + lineCh);
		//결재 채번
		List<EaApprovalVO> eaChList = eaApprovalService.eaChaebun();
		String eaCh = Chaebun.eaChaebun(eaChList);
		logger.info("결재채번확인 : " + eaCh);
		
		//기안서테이블 insert setting
		param.setGi_docno(gianCh);
		param.setGi_writerno(i_no);
		//결재선테이블 insert setting
		param.setEa_lineno(lineCh);		
		//문서테이블 insert setting
		param.setDo_docno(gianCh);
		param.setDo_type(param.getDo_type());
		param.setDo_writerno(i_no);
		param.setDo_writer(param.getGi_writer());
		param.setDo_title(param.getGi_title());
		param.setDo_lineno(lineCh);
		param.setDo_aprno(param.getEa_line1());
		//결재테이블 insert setting
		eavo.setEa_no(eaCh);
		eavo.setEa_docno(gianCh);
		eavo.setEa_lineno(lineCh);
		eavo.setEa_aprno(i_no);
		eavo.setEa_stateno("71");
		
		System.out.println("setting완료");
		
		//트랜잭션 처리
		dtd = new DefaultTransactionDefinition();
		dtd.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
		ts = ptm.getTransaction(dtd);
		//insert 
		try{
			System.out.println("한글 " + param.getGi_data());
			//기안서테이블 insert
			gi_result = eaApprovalService.gianInsert(param);
			if(gi_result==1){
				logger.info("기안서 테이블 insert 성공");
			}
			if(gi_result==0){
				logger.info("기안서 테이블 insert 실패");
			}
			
			//결재선테이블 insert
			line_result = eaApprovalService.lineInsert(param);
			if(line_result==1){
				logger.info("결재선테이블 insert 성공");
			}
			if(line_result==0){
				logger.info("결재선테이블 insert 실패");
			}
			
			//문서테이블 insert
			doc_result = eaApprovalService.documentInsert(param);
			if(doc_result==1){
				logger.info("문서테이블 insert 성공");
			}
			if(doc_result==0){
				logger.info("문서테이블 insert 실패");
			}
			
			//결재테이블 insert
			ea_result = eaApprovalService.ea1Insert(eavo);
			if(doc_result==1){
				logger.info("문서테이블 insert 성공");
			}
			if(doc_result==0){
				logger.info("문서테이블 insert 실패");
			}
			System.out.println("ts1");
			ptm.commit(ts);
			System.out.println("ts2");

		}catch(Exception e){
			
			logger.info("인서트 트랜잭션 에러 : " + e.getMessage());
			ptm.rollback(ts);
			
		}
		boolean b = doc_result==1 && gi_result==1 && ea_result==1 && line_result==1;

		return "성공";
	} //end of gianFormInsert()
	
	//파일 다운로드
	@RequestMapping("/download")
	public ModelAndView download(@RequestParam String file){
		logger.info("컨트롤러 download()함수 시작");
		
		ModelAndView mav = new ModelAndView();
		
		if(file!=null){
			mav.addObject("file", file);
			mav.setViewName(CONTEXT_PATH + "/eadownload");
		}
		
		return mav;
	}
	
	//문서 삭제
	@RequestMapping("/docDelete")
	public ModelAndView gianDelete(@ModelAttribute EaDocumentVO param
								   ,HttpServletRequest req){
		logger.info("컨트롤러 docDelete()함수 시작");
		
		int result = eaApprovalService.docDelete(param);
		
		if(result==1){
			logger.info("삭제 성공");
		}else{
			logger.info("삭제 실패");
		}
		
		RedirectView rdv = new RedirectView("/ea/goEaMain.uni");
		rdv.setContextRelative(true);
		ModelAndView mav = new ModelAndView(rdv);
		return mav;
	}
	
	//기안서 결재할 문서 상세
	@RequestMapping("/giToSelect")
	public ModelAndView giToSelect(@ModelAttribute EaDocumentVO param
			  					   ,HttpServletRequest req){
		logger.info("컨트롤러 giToSelect(param)함수 시작");
		
		//히스토리 의견 조회
		List<EaApprovalVO> hList = eaApprovalService.historyComment(param);
		
		//최종결재 의견 조회
		List<EaApprovalVO> eList = eaApprovalService.detailEaSelect(param);
		
		String do_aprno = (String)req.getSession().getAttribute("i_no");
		param.setDo_aprno(do_aprno);
		
		List<EaGianVO> list = eaApprovalService.giDetailSelect(param);
		
		ModelAndView mav = new ModelAndView();
		mav.addObject("toList", list);
		mav.addObject("eList", eList);
		mav.addObject("hList", hList);
		mav.setViewName(CONTEXT_PATH + "/gianToDetail");
		return mav;
	}
	
	//결재의견 팝업
	@RequestMapping("/goCommentPop")
	public ModelAndView goCommentPop(){
		ModelAndView mav = new ModelAndView();
		mav.setViewName(CONTEXT_PATH + "/commentPop");
		return mav;
	}
	
	//결재
	@ResponseBody
	@RequestMapping(value="/approval", produces="application/text; charset=utf-8")
	public String approval(@ModelAttribute EaApprovalVO param
						   ,HttpServletRequest req){
		logger.info("컨트롤러 approval(param)함수 시작");
		
		//히스토리 insert
		int iResult = eaApprovalService.historyInsert(param);
		if(iResult==1){
			logger.info("히스토리 insert 성공");
		}else{
			logger.info("히스토리 insert 실패");
		} 
		
		//결재 채번
		List<EaApprovalVO> eaChList = eaApprovalService.eaChaebun();
		String eaCh = Chaebun.eaChaebun(eaChList);
		
		String ea_aprno = (String)req.getSession().getAttribute("i_no");
		//서명조회
		EmCommonVO ecvo = new EmCommonVO();
		ecvo.setI_no(ea_aprno);
		List<EmCommonVO> signL = eaApprovalService.signSelect(ecvo);
		String mySign="";
		for(int i=0;i<signL.size();i++){
			EmCommonVO ec = signL.get(i);
			mySign = ec.getEm_sign();
		}
		
		String state = param.getEa_stateno();
		logger.info("결재상태코드 : " + state); 
		
		//setting
		EaDocumentVO edvo = new EaDocumentVO();
		edvo.setDo_docno(param.getEa_docno());
		param.setEa_no(eaCh);
		param.setEa_aprno(ea_aprno);
		
		String ea_line2 = "";
		String ea_line3 = "";
		
		//다음결재자 조회
		if(state.equals("72") || state.equals("73")){
			List<EaLineVO> nlist = eaApprovalService.nextApr(param);
			
			for(int j=0;j<nlist.size();j++){
				EaLineVO elvo = nlist.get(j);
				ea_line2 = elvo.getEa_line2();
				ea_line3 = elvo.getEa_line3();
			}
			//System.out.println("결재라인23" +ea_line2+" " + ea_line3 );
		}
		
		//히스토리 서명 조회
		List<EaApprovalVO> sList = eaApprovalService.signHistory(param);
		String sign1 = "";
		String sign2 = "";
		if(!state.equals("72")){
			for(int j=0;j<sList.size();j++){
				EaApprovalVO eavo = sList.get(j);
				sign1 = eavo.getEa_sign1();
				sign2 = eavo.getEa_sign2();
			}
		}
		
		//결재상태에 따라 서명, 다음결재자 setting
		if(state.equals("72")){ 
			logger.info("72 여기?");
			param.setEa_sign1(mySign);
			edvo.setDo_aprno(ea_line2);
		}
		if(state.equals("73")){
			logger.info("73 여기?");
			//sign1 히스토리에서 조회해와서 셋 
			param.setEa_sign1(sign1);
			param.setEa_sign2(mySign);
			edvo.setDo_aprno(ea_line3);
		}
		if(state.equals("74")){
			//sign1
			param.setEa_sign1(sign1);
			param.setEa_sign2(mySign);
			edvo.setDo_aprno("");
		}
		if(state.equals("76")){
			logger.info("76 여기?");
			//sign1,2
			param.setEa_sign1(sign1);
			param.setEa_sign2(sign2);
			param.setEa_sign3(mySign);
			edvo.setDo_aprno("");
		}
		if(state.equals("77")){
			param.setEa_sign1(sign1);
			param.setEa_sign2(sign2);
			edvo.setDo_aprno("");
		}
		
		//결재 update
		int uResult = eaApprovalService.eaUpdate(param);
		if(uResult==1){
			logger.info("결재 update 성공");
		}else{
			logger.info("결재 update 실패");
		} 
		
		//문서함 다음결재자 update
		int nResult = eaApprovalService.aprUpdate(edvo);
		if(nResult==1){
			logger.info("다음결재자 update 성공");
		}else{
			logger.info("다음결재자 update 실패");
		} 
		
		String r = "";
		boolean b = uResult==1 && nResult==1;
		if(b) r = "성공";
		else r = "실패";
		return r;
	}
	
	//기안서 상세보기
	@RequestMapping("/giDetailSelect")
	public ModelAndView detailSelect(@ModelAttribute EaDocumentVO param
				 				     ,HttpServletRequest req){
		//히스토리 의견 조회
		List<EaApprovalVO> hList = eaApprovalService.historyComment(param);
		
		//최종결재 의견 조회
		List<EaApprovalVO> eList = eaApprovalService.detailEaSelect(param);
		
		//기안서 내용 상세조회 
		String do_writerno = (String)req.getSession().getAttribute("i_no");
		param.setDo_writerno(do_writerno);
		List<EaGianVO> list = eaApprovalService.giDetailSelect(param);

		ModelAndView mav = new ModelAndView();
		mav.addObject("list", list);
		mav.addObject("eList", eList);
		mav.addObject("hList", hList);
		mav.setViewName(CONTEXT_PATH + "/gianDetail");
		return mav;
	}
	
	//기안서 끝
	
	//메인에서 휴가계작성창 이동
	@RequestMapping("/goVacaWrite")
	public ModelAndView goVacaWrite(@RequestParam String ea_linename
									,HttpServletRequest req){
		logger.info("컨트롤러 goVacaWrite()함수 시작");
		ModelAndView mav = new ModelAndView();
		
		if(ea_linename!=null&&ea_linename.length()>0){
			
			//오늘날짜 조회
			String today = eaApprovalService.today();
			mav.addObject("va_insertdate", today);
			
			//작성자 팀, 이름 조회
			String i_no = (String)req.getSession().getAttribute("i_no");
			CommonInfoVO civo = new CommonInfoVO();
			civo.setI_no(i_no);
			List<EmCommonVO> list = eaApprovalService.writerSelect(civo);
			mav.addObject("emvo", list);
			
			//양식
			mav.addObject("do_type", "휴가계");			
			mav.addObject("ea_linename", ea_linename);
			mav.setViewName(CONTEXT_PATH + "/vacaWrite");
		}
		
		return mav;
	}
	
	//휴가계 insert
	@ResponseBody
	@RequestMapping(value="/vacaInsert", produces="application/text; charset=utf-8")
	public String vacaInsert(@ModelAttribute EaVacationVO param
								   ,HttpServletRequest req){
		logger.info("컨트롤러 vacaInsert()함수 시작");
		int doc_result = 0;
		int va_result = 0;
		int ea_result = 0;
		int line_result = 0;
		
		EaApprovalVO eavo = new EaApprovalVO();
		String i_no = (String)req.getSession().getAttribute("i_no");
		
		//휴가계 채번
		List<EaVacationVO> vacaChList = eaApprovalService.vacaChaebun();
		String vacaCh = Chaebun.vacaChaebun(vacaChList);
		logger.info("휴가계채번확인 : " + vacaCh);
		//결재선 채번
		List<EaLineVO> lineChList = eaApprovalService.lineChaebun();
		String lineCh = Chaebun.eaLineChaebun(lineChList);
		logger.info("결재선채번확인 : " + lineCh);
		//결재 채번
		List<EaApprovalVO> eaChList = eaApprovalService.eaChaebun();
		String eaCh = Chaebun.eaChaebun(eaChList);
		logger.info("결재채번확인 : " + eaCh);
		
		//기안서테이블 insert setting
		param.setVa_docno(vacaCh);
		param.setVa_writerno(i_no);
		//결재선테이블 insert setting
		param.setEa_lineno(lineCh);		
		//문서테이블 insert setting
		param.setDo_docno(vacaCh);
		param.setDo_type(param.getDo_type());
		param.setDo_writerno(i_no);
		param.setDo_writer(param.getVa_writer());
		param.setDo_title(param.getVa_title());
		param.setDo_insertdate(param.getVa_insertdate());
		param.setDo_lineno(lineCh);
		param.setDo_aprno(param.getEa_line1());
		//결재테이블 insert setting
		eavo.setEa_no(eaCh);
		eavo.setEa_docno(vacaCh);
		eavo.setEa_lineno(lineCh);
		eavo.setEa_aprno(i_no);
		eavo.setEa_stateno("71");
		//eavo.setEa_date(param.getGi_insertdate());
		
		System.out.println("setting완료");
		
		//트랜잭션 처리
		dtd = new DefaultTransactionDefinition();
		dtd.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRED);
		ts = ptm.getTransaction(dtd);
		//insert 
		try{
			
			//기안서테이블 insert
			va_result = eaApprovalService.vacaInsert(param);
			if(va_result==1){
				logger.info("휴가계 테이블 insert 성공");
			}
			if(va_result==0){
				logger.info("휴가계 테이블 insert 실패");
			}
			
			//결재선테이블 insert
			line_result = eaApprovalService.lineInsert(param);
			if(line_result==1){
				logger.info("결재선테이블 insert 성공");
			}
			if(line_result==0){
				logger.info("결재선테이블 insert 실패");
			}
			
			//문서테이블 insert
			doc_result = eaApprovalService.documentInsert(param);
			if(doc_result==1){
				logger.info("문서테이블 insert 성공");
			}
			if(doc_result==0){
				logger.info("문서테이블 insert 실패");
			}
			
			//결재테이블 insert
			ea_result = eaApprovalService.ea1Insert(eavo);
			if(doc_result==1){
				logger.info("문서테이블 insert 성공");
			}
			if(doc_result==0){
				logger.info("문서테이블 insert 실패");
			}
			System.out.println("ts1");
			ptm.commit(ts);
			System.out.println("ts2");

		}catch(Exception e){
			
			logger.info("인서트 트랜잭션 에러 : " + e.getMessage());
			ptm.rollback(ts);
			
		}
		boolean b = doc_result==1 && va_result==1 && ea_result==1 && line_result==1;

		return "성공";		
		
	} //end of vacaInsert() 
	
	//휴가계 상세조회
	@RequestMapping("/vaDetailSelect")
	public ModelAndView vaDetailSelect(@ModelAttribute EaDocumentVO param
				 				       ,HttpServletRequest req){
		//히스토리 의견 조회
		List<EaApprovalVO> hList = eaApprovalService.historyComment(param);
		
		//최종결재 의견 조회
		List<EaApprovalVO> eList = eaApprovalService.detailEaSelect(param);
		
		//휴가계 내용 상세조회 
		String do_writerno = (String)req.getSession().getAttribute("i_no");
		param.setDo_writerno(do_writerno);
		List<EaVacationVO> list = eaApprovalService.vaDetailSelect(param);

		ModelAndView mav = new ModelAndView();
		mav.addObject("list", list);
		mav.addObject("eList", eList);
		mav.addObject("hList", hList);
		mav.setViewName(CONTEXT_PATH + "/vacaDetail");
		return mav;
	}
	
	//기안서 결재할 문서 상세
	@RequestMapping("/vaToSelect")
	public ModelAndView vaToSelect(@ModelAttribute EaDocumentVO param
			  					  ,HttpServletRequest req){
		logger.info("컨트롤러 vaToSelect(param)함수 시작");
		
		//히스토리 의견 조회
		List<EaApprovalVO> hList = eaApprovalService.historyComment(param);
		
		//최종결재 의견 조회
		List<EaApprovalVO> eList = eaApprovalService.detailEaSelect(param);
		
		String do_aprno = (String)req.getSession().getAttribute("i_no");
		param.setDo_aprno(do_aprno);
		
		List<EaVacationVO> list = eaApprovalService.vaDetailSelect(param);
		
		ModelAndView mav = new ModelAndView();
		mav.addObject("toList", list);
		mav.addObject("eList", eList);
		mav.addObject("hList", hList);
		mav.setViewName(CONTEXT_PATH + "/vacaToDetail");
		return mav;
	}	
	
	 //결재라인 팝업창으로  
    @RequestMapping("/goEalinePop")
    public ModelAndView goEalinePop(){
       logger.info("컨트롤러 goEalinePop()함수 시작");
       ModelAndView mav = new ModelAndView();
       mav.setViewName(CONTEXT_PATH + "/eaTreeLine");
       return mav;
    } //end of goEalinePop()	
} // end of EaApprovalController

